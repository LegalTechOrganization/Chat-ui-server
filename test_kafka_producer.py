#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π producer –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ chat-service
"""
import asyncio
import json
import uuid
from datetime import datetime
from aiokafka import AIOKafkaProducer


async def send_test_event(topic: str, event_data: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    
    producer = AIOKafkaProducer(
        bootstrap_servers="localhost:9095",  # –ü–æ—Ä—Ç chat-service Kafka
        value_serializer=lambda v: json.dumps(v, default=str).encode('utf-8')
    )
    
    try:
        await producer.start()
        
        await producer.send(
            topic=topic,
            value=event_data,
            key=event_data['request_id'].encode('utf-8')
        )
        
        print(f"‚úÖ Sent test event to {topic}: {event_data['request_id']}")
        
    finally:
        await producer.stop()


async def test_send_message():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    event_data = {
        "message_id": str(uuid.uuid4()),
        "request_id": str(uuid.uuid4()),
        "operation": "chat_send_message",
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "payload": {
            "message": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "conversation_id": None,
            "model": "gpt-3.5-turbo",
            "temperature": 0.7,
            "system_content": "You are a helpful assistant.",
            "user_context": {
                "email": "test@example.com",
                "full_name": "Test User",
                "active_org_id": "test-org-123",
                "org_role": "admin",
                "is_org_owner": True
            },
            "request_metadata": {
                "source_ip": "127.0.0.1",
                "user_agent": "TestAgent/1.0",
                "gateway_request_id": str(uuid.uuid4()),
                "timestamp": datetime.utcnow().isoformat() + "Z"
            }
        }
    }
    
    await send_test_event("chat-service-send-message", event_data)


async def test_get_conversations():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    event_data = {
        "message_id": str(uuid.uuid4()),
        "request_id": str(uuid.uuid4()),
        "operation": "chat_get_conversations",
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "payload": {
            "limit": 10,
            "offset": 0,
            "user_context": {
                "email": "test@example.com",
                "full_name": "Test User",
                "active_org_id": "test-org-123",
                "org_role": "admin",
                "is_org_owner": True
            },
            "request_metadata": {
                "source_ip": "127.0.0.1",
                "user_agent": "TestAgent/1.0"
            }
        }
    }
    
    await send_test_event("chat-service-get-conversations", event_data)


async def test_create_conversation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
    
    event_data = {
        "message_id": str(uuid.uuid4()),
        "request_id": str(uuid.uuid4()),
        "operation": "chat_create_conversation",
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "payload": {
            "topic": "–¢–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥",
            "user_context": {
                "email": "test@example.com",
                "full_name": "Test User",
                "active_org_id": "test-org-123",
                "org_role": "admin",
                "is_org_owner": True
            },
            "request_metadata": {
                "source_ip": "127.0.0.1",
                "user_agent": "TestAgent/1.0"
            }
        }
    }
    
    await send_test_event("chat-service-create-conversation", event_data)


async def test_create_prompt():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞"""
    
    event_data = {
        "message_id": str(uuid.uuid4()),
        "request_id": str(uuid.uuid4()),
        "operation": "chat_create_prompt",
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "payload": {
            "title": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç",
            "prompt": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
            "user_context": {
                "email": "test@example.com",
                "full_name": "Test User",
                "active_org_id": "test-org-123",
                "org_role": "admin",
                "is_org_owner": True
            },
            "request_metadata": {
                "source_ip": "127.0.0.1",
                "user_agent": "TestAgent/1.0"
            }
        }
    }
    
    await send_test_event("chat-service-create-prompt", event_data)


async def test_upload_document():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    
    event_data = {
        "message_id": str(uuid.uuid4()),
        "request_id": str(uuid.uuid4()),
        "operation": "chat_upload_document",
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "payload": {
            "title": "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç",
            "file": "data:text/plain;base64,VGVzdCBkb2N1bWVudCBjb250ZW50",
            "user_context": {
                "email": "test@example.com",
                "full_name": "Test User",
                "active_org_id": "test-org-123",
                "org_role": "admin",
                "is_org_owner": True
            },
            "request_metadata": {
                "source_ip": "127.0.0.1",
                "user_agent": "TestAgent/1.0"
            }
        }
    }
    
    await send_test_event("chat-service-upload-document", event_data)


async def test_generate_title():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    
    event_data = {
        "message_id": str(uuid.uuid4()),
        "request_id": str(uuid.uuid4()),
        "operation": "chat_generate_title",
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "payload": {
            "conversation_id": "1",  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∏–∞–ª–æ–≥ —Å ID 1 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            "prompt": "Generate a short title for this conversation",
            "user_context": {
                "email": "test@example.com",
                "full_name": "Test User",
                "active_org_id": "test-org-123",
                "org_role": "admin",
                "is_org_owner": True
            },
            "request_metadata": {
                "source_ip": "127.0.0.1",
                "user_agent": "TestAgent/1.0"
            }
        }
    }
    
    await send_test_event("chat-service-generate-title", event_data)


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Kafka –¥–ª—è chat-service...")
    
    tests = [
        ("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞", test_create_conversation),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤", test_get_conversations),
        ("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è", test_send_message),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞", test_create_prompt),
        ("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞", test_upload_document),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞", test_generate_title),
    ]
    
    for test_name, test_func in tests:
        try:
            print(f"\nüîÑ {test_name}...")
            await test_func()
            await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ chat-service –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π")


if __name__ == "__main__":
    asyncio.run(main())
