#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ PostgreSQL —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–π sub –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""

import os
import sys
import django
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatgpt_ui_server.settings_postgres')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Django
django.setup()

from django.core.management import execute_from_command_line
from django.db import connection
from chat.models_postgres import Conversation, Message, Prompt, EmbeddingDocument, Setting, TokenUsage


def create_initial_settings():
    """–°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("üîß –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
    
    settings_data = [
        {'name': 'open_registration', 'value': 'True'},
        {'name': 'open_web_search', 'value': 'False'},
        {'name': 'open_api_key_setting', 'value': 'False'},
        {'name': 'open_frugal_mode_control', 'value': 'True'},
    ]
    
    for setting_data in settings_data:
        Setting.objects.get_or_create(
            name=setting_data['name'],
            defaults={'value': setting_data['value']}
        )
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")


def create_sample_data():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π sub (–∏–∑ JWT —Ç–æ–∫–µ–Ω–∞)
    test_sub = "c8410440-99ed-4e52-af5d-9156434571b4"
    test_org_id = "123e4567-e89b-12d3-a456-426614174000"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–µ—Å–µ–¥—É
    conversation, created = Conversation.objects.get_or_create(
        sub=test_sub,
        topic="–¢–µ—Å—Ç–æ–≤–∞—è –±–µ—Å–µ–¥–∞ –≤ PostgreSQL",
        defaults={
            'org_id': test_org_id,
        }
    )
    
    if created:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–µ—Å–µ–¥–∞: {conversation.topic}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = Message.objects.create(
            sub=test_sub,
            conversation=conversation,
            message="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ PostgreSQL.",
            is_bot=False,
            message_type=0
        )
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.message[:50]}...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = Prompt.objects.create(
            sub=test_sub,
            title="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç",
            content="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã PostgreSQL."
        )
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–º–ø—Ç: {prompt.title}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        token_usage, created = TokenUsage.objects.get_or_create(
            sub=test_sub,
            defaults={'tokens': 100}
        )
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å —Ç–æ–∫–µ–Ω–æ–≤: {token_usage.tokens} —Ç–æ–∫–µ–Ω–æ–≤")
    
    else:
        print(f"‚ÑπÔ∏è –ë–µ—Å–µ–¥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {conversation.topic}")


def verify_database_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    with connection.cursor() as cursor:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name IN ('conversations', 'messages', 'prompts', 'embedding_documents', 'settings', 'token_usage')
            ORDER BY table_name
        """)
        
        tables = [row[0] for row in cursor.fetchall()]
        print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è conversations
        cursor.execute("""
            SELECT indexname, indexdef 
            FROM pg_indexes 
            WHERE tablename = 'conversations'
        """)
        
        indexes = cursor.fetchall()
        print(f"üîó –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è conversations:")
        for index_name, index_def in indexes:
            print(f"  - {index_name}: {index_def}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ PostgreSQL...")
    
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        print("üì¶ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...")
        execute_from_command_line(['manage.py', 'makemigrations', 'chat'])
        execute_from_command_line(['manage.py', 'migrate'])
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        create_initial_settings()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        create_sample_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
        verify_database_structure()
        
        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()
